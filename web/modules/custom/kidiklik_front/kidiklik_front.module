<?php

/**
 * @file
 * Contains kidiklik_front.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\geolocation\ProximityTrait;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\views\Views;

/**
 * Implements hook_help().
 */
function kidiklik_front_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the kidiklik_front module.
    case 'help.page.kidiklik_front':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module pour la gestion du front') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function kidiklik_front_theme()
{
  return [
    'facebook_block' => [
      'variables' => [
        'content' => NULL,
        'dept' => NULL
      ],
    ],
    'sortie_moment_bouton' => [
      'variables' => [
        'ref_act' => NULL,
        'ref_adh' => NULL,
        'dept' => NULL
      ],
    ],
    'kidiklik_front' => [
      'render element' => 'children',
    ],
    'kidiklik_page' => [
      'variables' => [
        "output" => NULL,
      ]
    ],
    'carte_block' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
    'recherche_geo_block' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
    'recherche_activites' => [
      'variables' => [
        'results' => NULL,
      ]
    ],
    'reseaux_sociaux' => [
      'variables' => [
        'content' => NULL,
      ]
    ],
    'reserver_bouton' => [
      'variables' => [
        'content' => NULL,
        'type_resa' => null,
        'lien' => null,
        'email' => null,
        'tel' => null
      ]
    ],
    'sitemap_xml' => [
      'variables' => [
        'content' => NULL,
      ]
    ]
  ];
}


function kidiklik_front_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

  if($form_id === 'node_message_contact_form') {
    $page_dep = \Drupal::service('kidiklik.service')->getPageDepartement();
    if(!empty($page_dep)) {
      $renderer = \Drupal::service("renderer");
      $variables['coordonnee'] = [
	      '#markup' => sprintf('<p><b class="bleu titre_h1">Coordonnées</b></p><b>Nom :</b> %s<br><b>Téléphone :</b> <a href="tel:%s">%s</a><br><b>E-mail :</b> <a href="mailto:%s">%s</a>',
	      $page_dep->get('field_societe')->value,
	      $page_dep->get('field_telephone')->value,
	      $page_dep->get('field_telephone')->value,
	      $page_dep->get('field_e_mail')->value,
	      $page_dep->get('field_e_mail')->value
        ),
      ];


      $form["coordonnees"] = [
        "#type" => "html_tag",
        "#tag" => "div",
        "#value" => $renderer->render($variables['coordonnee'])->__toString(),
        "#attributes" => [
          "class" => [
            "jumbotron", "mt-4 pt-3 pb-3"
          ]
        ],
        "#weight" => 0,
      ];
    }

  }
  if ($form_id == "user_login_form") {
    $form['name']['#attributes']['class'][] = 'form-control';
    $form['pass']['#attributes']['class'][] = 'form-control';

    $form['connexion'] = [
      '#type' => 'submit',
      '#value' => 'Se connecter',
      '#attributes' => [
        'class' => [
          'btn-connexion'
        ]
      ]
    ];
    $form['msg_label_forget_passwd'] = [
      "#type" => "html_tag",
      '#title' => 'Mot de passe oublié ? ',
      '#value' => 'Mot de passe oublié ? ',
      "#tag" => "a",
      '#attributes' => [
        'href' => '/X255zTZB9ytq/password',
        'class' => [
          'msg-passwd-forget col'
        ]
      ]
    ];
    /*$form['msg_label_creer_compte'] = [
      "#type" => "html_tag",
      '#title' => 'Pas encore de compte ? ',
      '#value' => 'Pas encore de compte ? ',
      "#tag" => "div",
      '#attributes' => [
        'class' => [
          'msg-creer-compte'
        ]
      ]
    ];*/

    $form['btn_creer_compte'] = [
      '#type' => 'html_tag',

      '#value' => 'Créer un compte',
      "#tag" => "a",
      '#attributes' => [
        'href' => '/X255zTZB9ytq/register',
        'data-dialog-type' => 'modal',
        'data-dialog-options' => '{"width":700,"dialogClass":"user-register"}',
        'class' => [
          'btn-creer-compte use-ajax login-popup-form col'
        ]
      ]
    ];

    unset($form['actions']);
  }

  if ($form_id === 'user_register_form' && \Drupal::currentUser()->Id() === 0) {
    unset($form['field_administrateur_dep']);
    unset($form['field_departement']);
    unset($form['field_favoris']);
    unset($form['user_picture']);
  }

  if (!empty($form['#webform_id']) && $form['#webform_id'] === 'jeu_concours') {
    if (!empty(\drupal::request()->get('node'))) {
      $nid = \drupal::request()->get('node')->Id();
      $form['elements']['which_content']['#value'] = $nid;
      $form['#submit'][]= 'kidiklik_front_submit_jeu_concours';
      $form['#validate'][] = 'kidiklik_front_validate_jeu_concours';
    }
  }

  /** formulaire de recherche */
  if ($form['#id'] == "views-exposed-form-activites-recherche-activites") {
    $database = \Drupal::database();
    $query = $database->query("select * from villes where code_postal like '" . get_departement() . "%' order by commune");
    $villes = $query->fetchAll();

    $categories = \Drupal::entityTypeManager()->getStorage("taxonomy_term")->loadByProperties([
      "vid" => "rubriques_activite",
      "parent" => 0,
      "status" => 1
    ]);

    $output = null;
    $list_cat = [];
    $list_cat['All'] = 'Choisissez ...';
    foreach ($categories as $cat) {
      $sous_categories = \Drupal::entityTypeManager()->getStorage("taxonomy_term")->loadByProperties([
        "vid" => "rubriques_activite",
        "parent" => $cat->Id(),
        "status" => 1,
        "field_departement" => get_term_departement()
      ]);

      $list_cat[$cat->Id()] = $cat->getName();
      if (!empty($sous_categories)) {
        foreach ($sous_categories as $sc) {
          $list_cat[$sc->Id()] = "- " . $sc->getName();
        }
      }
    }

    $form['field_rubriques_activite_target_id']['#options'] = $list_cat;
    $form['field_rubriques_activite_target_id']['#weight'] = -10;
    $form['field_rubriques_activite_target_id']['#title'] = 'Activité';
    $form['search']['#weight'] = -9;

    $form['lieu'] = [
	    "#type" => "textfield",
	    '#attributes' => [
		    'placeholder' => 'Ville ou Code Postal ?',
	    ],
      "#title" => "Où ?",
      "#weight" => -7
    ];

    $options[''] = 'Filtrer par zone';
    $options['Géolocalisé'] = [
      'geo' => 'Autour de moi',
    ];
    foreach ($villes as $ville) {
      $options['Par ville'][$ville->commune] = $ville->commune;
    }
    /*$form['ville'] = [
      "#type" => "select",
      "#title" => "Où ?",
      "#options" => $options,
      "#weight" => -9
    ];*/
    //$form['field_rubriques_activite_target_id']["#weight"] = -10;
    $form['date_debut']["#weight"] = -6;
    $form['date_fin']["#weight"] = -5;
    $form['field_tranches_d_ages_value']["#weight"] = -8;

    $form['quand'] = [
      "#type" => "select",
      "#title" => "Quand ?",
      "#options" => [
        "" => "N'importe quand",
        "now" => "Aujourd'hui",
        "mercredi" => "Ce mercredi",
        "wd" => "Ce week-end",
        "semaine" => "Cette semaine",
        "date" => "Par date"
      ],
      "#weight" => -8
    ];

    $form["center[coordinates][lat]"] = [
      '#type' => 'hidden',
      '#default_value' => \Drupal::Request()->get('center')['coordinates']['lat'],
    ];
    $form["center[coordinates][lng]"] = [
      '#type' => 'hidden',
      '#default_value' => \Drupal::Request()->get('center')['coordinates']['lng'],
    ];
    
    unset($form['thematiques']['#options']['All']);
    $options = $form['thematiques']['#options'];
    $output = [];
        for($i=0;$i<3;$i++) {
          $output[] = current($options);
          next($options);
        }
    $options = array_merge(['All' => implode(', ', $output).'...'], $options);
    $form['thematiques']['#options'] = $options;
    $form['thematiques']['#default_value'] = $output;

    unset($form['vacances']['#options']['All']);
    $options = $form['vacances']['#options'];
    $output = [];
        for($i=0;$i<3;$i++) {
          $output[] = current($options);
          next($options);
        }
    $options = array_merge(['All' => implode(', ', $output).'...'], $options);
    $form['vacances']['#options'] = $options;
    $form['vacances']['#default_value'] = $output;

    unset($form['tranches_ages']['#options']['All']);
    $options = $form['tranches_ages']['#options'];
    
    $options = array_merge(['All' => "Tranches d'âges"], $options);
    $form['tranches_ages']['#options'] = $options;
    $form['tranches_ages']['#default_value'] = $output;
  }


  if ($form_id == "contact_message_pour_joindre_kidiklik_form") {

    $form["#validate"][] = "kidiklik_front_validate_contact_form";

  }

  if ($form_id == "node_message_contact_form") {
    $term_dep = get_term_departement();
    $form["#validate"][] = "kidiklik_front_validate_contact_form";
    $form["#attached"]["library"][] = "kidiklik_front/kidiklik_front.actions";
    $form["field_departement"]["widget"][0]["target_id"]["#default_value"] = taxonomy_term_load($term_dep);
  }
}


function kidiklik_front_form_submit($form, FormStateInterface &$form_state) {
  //kint($form);exit;
}

function getCategories(array &$form, FormStateInterface $form_state)
{
  $response = new AjaxResponse();

  $form["ville"] = [
    "widget" => [
      "#type" => "textfield",
      "#title" => "Ville",
      "#value" => 'test',
      "#prefix" => "<div id='edit-field-ville'>",
      "#suffix" => "</div>",
      '#validated' => TRUE
    ],
    "#weight" => $poids_ville,
    '#validated' => TRUE
  ];
  $renderer = \Drupal::service("renderer");
  $renderedField = $renderer->render($form);
  $response->addCommand(new ReplaceCommand('#sous-categories', $renderedField));
}



function kidiklik_front_validate_contact_form($form, FormStateInterface $form_state)
{
 /* $term_dep = current(\Drupal::entityTypeManager()
    ->getStorage("taxonomy_term")
    ->loadByProperties(['name' => get_departement()]));
  if(!empty($term_dep)) {
    $email = 'nico@3wou.net';//$term_dep->get('field_e_mail')->value;
    if(!empty($email)) {
      $langcode = \Drupal::currentUser()->getPreferredLangcode();
      $mailManager = \Drupal::service('plugin.manager.mail');
      $params['body'] = current($form_state->getValue('field_votre_question'))['value'];
      $params['subject'] = sprintf('Message de %s %s',current($form_state->getValue('field_nom'))['value'],current($form_state->getValue('field_prenom'))['value']);
      $result = $mailManager->mail('kidiklik_front', 'envoi_message', $email, $langcode, $params, NULL, $send);
      if ($result['result'] !== true) {
        drupal_set_message(t('Il y a eu un problème lors de l\'envoi de votre message et il n\'a pas été envoyé.'), 'error');
      }
      else {
        drupal_set_message(t('Votre message a été envoyé-.'));
      }
     
    }
  }*/
}
function kidiklik_front_submit_jeu_concours($form, FormStateInterface $form_state)
{

  
}
function kidiklik_front_validate_jeu_concours($form, FormStateInterface $form_state)
{

  
}


/*
 * Modification de la requête sql d'une vue
 */
function kidiklik_front_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\QueryPluginBase $query)
{
	$term_dep = get_term_departement();
	switch($view->current_display) {
    case 'page_agenda_adherent':
    case 'page_contenu_adherent':
    case 'rubriques_activites':
		  $DELTA_PERIOD = 365;
		  break;
	case 'recherche_activites':
	case 'page_recherche_test':
	case 'recherche_test':
	
		$DELTA_PERIOD = 90;
		break;
	default:
		$DELTA_PERIOD = 30;
	}
	$search = [];
	$search[] = "((CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') AND DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')) AND (CURDATE()+INTERVAL ".$DELTA_PERIOD." DAY BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') AND DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
	$search[] = "(CURDATE()<=DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') AND ((CURDATE()+INTERVAL ".$DELTA_PERIOD." DAY) BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') AND DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
	$search[] = "((CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') AND DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')) AND (CURDATE() + INTERVAL ".$DELTA_PERIOD." DAY>=DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
  	$search[] = "(
    (
      DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') BETWEEN CURDATE() AND (CURDATE() + INTERVAL ".$DELTA_PERIOD." DAY)
    )
    AND 
    (
      DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')  BETWEEN CURDATE() AND (CURDATE() + INTERVAL ".$DELTA_PERIOD." DAY)
    )
  )";

	$rule_search = "(" . implode(' OR ',$search).")"; 


  if ($view->current_display === 'article_national_3' || $view->current_display === 'article_national_1' || $view->current_display === 'article_national_2') {
    $query->where[1]["conditions"][] = current($query->where[0]['conditions']);
    unset($query->where[0]['conditions'][0]);
    $configuration = array(
      'type' => 'left',
      'table' => 'node__field_partage_departements',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep_part', $join, 'node_field_data');
    $query->addTable('node__field_partage_departements', $rel, $join, 'field_dep_part');
    $query->addWhere('', 'field_dep_part.field_partage_departements_target_id', get_term_departement(), 'in');


    $query->where[0]["type"] = "and";

  }

	if($view->current_display == "diaporama_rubriques") {
		$query->where[1]["conditions"][2]["operator"] = "<=";
		$query->where[1]["conditions"][2]["value"] = get_date();
		$query->where[1]["conditions"][3]["operator"] = ">=";
		$query->where[1]["conditions"][3]["value"] = get_date();
	}

  if ($view->current_display == "diaporama" ||
    $view->current_display == "block_article_accueil" ||
    $view->current_display == "bloc_liste_mise_en_avant") {
    /* la date de début du bloc de mise en avant doit être inférieur ou égal à la date du jour */
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][2]["value"] = get_date();
    /* la date de fin du bloc de mise en avant doit être supérieur ou égal à la date du jour */
    $query->where[1]["conditions"][3]["operator"] = ">=";
    $query->where[1]["conditions"][3]["value"] = get_date();

    $query->where[1]["conditions"][] = current($query->where[0]['conditions']);
    unset($query->where[0]['conditions'][0]);

    $configuration = array(
      'type' => 'left',
      'table' => 'node__field_partage_departements',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep_part', $join, 'node_field_data');
    $query->addTable('node__field_partage_departements', $rel, $join, 'field_dep_part');
    $query->addWhere('0', 'field_dep_part.field_partage_departements_target_id', [get_term_departement()], '=');

    $query->where[0]["type"] = "OR";

  }

  if ($view->current_display === 'bloc_jeux_concours') {
    /* la date de début du bloc de mise en avant doit être inférieur ou égal à la date du jour */
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][2]["value"] = date('Y-m-d');
    /* la date de fin du bloc de mise en avant doit être supérieur ou égal à la date du jour */
    $query->where[1]["conditions"][3]["operator"] = ">=";
    $query->where[1]["conditions"][3]["value"] = date('Y-m-d');

    $configuration = array(
      'type' => 'left',
      'table' => 'node__field_partage_departements',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep_part', $join, 'node_field_data');
    $query->addTable('node__field_partage_departements', $rel, $join, 'field_dep_part');
    $query->addWhere('0', 'field_dep_part.field_partage_departements_target_id', get_term_departement(), 'in');


    $term_dep = get_term_departement();

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_departement',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );


    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep', $join, 'node_field_data');
    $query->addTable('node__field_departement', $rel, $join, 'field_dep');
    $query->addWhere('0', 'field_dep.field_departement_target_id', $term_dep, '=');

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_tous_les_sites',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );


    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_tous_les_sites', $join, 'node_field_data');
    $query->addTable('node__field_tous_les_sites', $rel, $join, 'field_tous_les_sites');
    $query->addWhere('0', 'field_tous_les_sites.field_tous_les_sites_value', 1, '=');

    $query->where[0]["type"] = "OR";
    //if(isset($_GET['dev']))ksm($query);

  }

  if ($view->current_display == "articles_departement_accueil") {
    $deps = [];
    $deps[get_term_departement()] = (string)get_term_departement();
    $deps[get_term_departement(0)] = (string)get_term_departement(0);

    $query->where[1]["conditions"][2]["value"] = date("Y-m-d");
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][3]["value"] = date("Y-m-d");
    $query->where[1]["conditions"][3]["operator"] = ">=";

    $query->where[0]["conditions"][1]["value"][":node__field_departement_field_departement_target_id[]"] = $deps;

  }
  if ($view->current_display == "article_national_1" ||
    $view->current_display == "article_national_2" ||
    $view->current_display == "article_national_3" ||
    $view->current_display == "articles_dep_accueil_1" ||
    $view->current_display == "articles_dep_accueil_2" ||
    $view->current_display == "bloc_mise_en_avant_nat" ||
    $view->current_display == "bloc_mise_en_avant_dep" ||
    $view->current_display == "articles_dep_accueil_3") {
      
    $query->where[1]["conditions"][2]["value"] = get_date();
    $query->where[1]["conditions"][2]["operator"] = "<=";

    $query->where[1]["conditions"][3]["value"] = get_date();
    $query->where[1]["conditions"][3]["operator"] = ">=";
  }

  if($view->current_display == "bloc_mise_en_avant_nat") {
    if($view->current_display == "bloc_mise_en_avant_nat") {
      $configuration = array(
        'type' => 'LEFT',
        'table' => 'node__field_partage_departements',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'operator' => '=',
      );
  
      $join = \Drupal\views\Views::pluginManager('join')
        ->createInstance('standard', $configuration);
      $rel = $query->addRelationship('node__field_partage_departements', $join, 'node_field_data');
      $query->addTable('node__field_partage_departements', $rel, $join, 'node__field_partage_departements');
      $query->addWhere('', 'node__field_partage_departements.field_partage_departements_target_id', (int)get_term_departement(), '=');
      unset($query->where[0]['conditions'][1]);
      //ksm($query->where);
    }
  }

  if ($view->current_display == "rubriques_activites_footer") {
    $query->where[1]["conditions"][2]["value"] = get_term_departement();
    $query->where[1]["conditions"][2]["operator"] = "=";
   // kint($query->query()->__toString());exit;
  }


  /**
   * PAGE RUBRIQUES
   */
  if ($view->current_display == "rubriques_activites") {
    $title = $view->getTitle();
    $departement =  \Drupal::entityTypeManager()->getStorage("taxonomy_term")->load(get_term_departement());

    $title = sprintf('%s %s %s', $title, 
      strtolower($departement->get('field_prefix')->value),
      $departement->get('field_nom')->value);
    $view->setTitle($title);

    $term_id = (int)\Drupal::request()->attributes->get('taxonomy_term')->id();
    $liste_child = \Drupal::entityTypeManager()->getStorage("taxonomy_term")->loadByProperties([
      'vid' => 'rubriques_activite',
      'parent' => $term_id,
      'field_departement' => get_term_departement()
    ]);
    $tb_child = [];
    foreach ($liste_child as $key => $child) {
      $tb_child[] = $key;
    }
    $tb_child[] = $term_id;
    $query->where[0]["conditions"][0]["field"] = 'taxonomy_index.tid in (' . implode(',', $tb_child) . ')';
    $query->where[0]["conditions"][0]["value"] = [];

    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_debut',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_debut', $rel, $join, 'paragraph__field_date_de_debut');
    $query->addWhere('', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value', [], '<>');

    //$query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = "((DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')>CURDATE()) or (CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";

    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = $rule_search;

    
    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["operator"] = "formula";
    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_fin',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_fin', $rel, $join, 'paragraph__field_date_de_fin');
  }

  // agenda adhérent
  if ($view->current_display == "page_agenda_adherent" || $view->current_display == "page_contenu_adherent") {
    $ref_act = \Drupal::request()->get("ref_act");
    if ($view->current_display == "page_agenda_adherent" && empty($ref_act)) {
      unset($query->where[0]);
    }
    $title = $view->getTitle();
    $departement =  \Drupal::entityTypeManager()->getStorage("taxonomy_term")->load(get_term_departement());

    $title = sprintf('%s %s %s', $title, 
      strtolower($departement->get('field_prefix')->value),
      $departement->get('field_nom')->value);
    $view->setTitle($title);
    
    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_debut',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_debut', $rel, $join, 'paragraph__field_date_de_debut');
    $query->addWhere('', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value', [], '<>');

    //$query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = "((DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')>=CURDATE()) or (CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = $rule_search;
    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["operator"] = "formula";
    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_fin',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_fin', $rel, $join, 'paragraph__field_date_de_fin');

    $term_dep = get_term_departement();
    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_departement',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );

    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep', $join, 'node_field_data');
    $query->addTable('node__field_departement', $rel, $join, 'field_dep');
    $query->addWhere('', 'field_dep.field_departement_target_id', $term_dep, '=');
  }

  // activités associées
  if ($view->current_display == "activites_associees") {
    //
    $node = Drupal::request()->get('node');

//kint($node->get('field_adherent')); exit;
    $adh = current($node->get('field_adherent')->getValue())['target_id'];
    if (empty($adh)) {
      $adh = -1;
    }

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_adherent',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('node__field_adherent', $join, 'node__field_adherent');
    $query->addTable('node__field_adherent', $rel, $join, 'node__field_adherent');
    $query->addWhere('', 'node__field_adherent.field_adherent_target_id', $adh, '=');
    $query->addWhere('', 'nid', $node->id(), '<>');

    $query->where[1]['conditions'][2]['field'] = "DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d') >= DATE_FORMAT('" . date('Y-m-d') . "', '%Y-%m-%d')";

  }

  /**
   * PAGE CONSOLE DE RECHERCHE
   */
  if ($view->current_display == "page_recherche_test" || 
    $view->current_display == "recherche_test" ||  
    $view->current_display == "recherche_activites") {
    $query->distinct = true;
    $query->groupby[]='nid';
    //$query->query()->execute();
    /*$title = $view->getTitle();
    $departement =  \Drupal::entityTypeManager()->getStorage("taxonomy_term")->load(get_term_departement());

    $title = sprintf('%s %s %s', $title, 
      strtolower($departement->get('field_prefix')->value),
      $departement->get('field_nom')->value);*/
    //$view->setTitle(\Drupal::config("system.site")->get('slogan'));
    
//kint(\Drupal::config("system.site")->get('slogan'));
    $ou = \Drupal::request()->get("lieu");
    //$ou = \Drupal::request()->get("ville");
    $quand = \Drupal::request()->get("quand");
//    $search = explode(' ', trim(\Drupal::request()->get("search")));
    $keywords = trim(\Drupal::request()->get("search"));
    $ref_adherent = \Drupal::request()->get("ref_adh") ?? \Drupal::request()->get("ref_adherent") ?? null;
    
    if (!empty(\Drupal::request()->get("ref_adh"))) {
      $query->where[1]['conditions'][1]['value'] = ['agenda'];
    }

    if (!empty($ref_adherent) && $view->current_display !== "search_event") {
      $configuration = array(
        'type' => 'INNER',
        'table' => 'node__field_adherent',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'operator' => '=',
      );
      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('node__field_adherent', $join, 'node__field_adherent');
      $query->addTable('node__field_adherent', $rel, $join, 'node__field_adherent');
      $query->addWhere('', 'node__field_adherent.field_adherent_target_id', $ref_adherent, '=');
     // ksm($query->where);
    }

    if (!empty($keywords)) {
	   // unset($query->where[1]["conditions"][count($query->where[1]["conditions"]) - 1]);
	    	 //   unset($query->where[5]["conditions"][1]);
	    $query->where[5]["conditions"][1]['value'] = addslashes('%' . htmlentities($keywords) . '%');
	    $query->where[5]["conditions"][2]['value'] = addslashes('%' . htmlentities($keywords) . '%');

      /*$configuration = array(
        'type' => 'INNER',
        'table' => 'node__field_resume',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'operator' => '=',
      );
      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('node__field_resume', $join, 'node_field_data');
      $query->addTable('node__field_resume', $rel, $join, 'node__field_resume');
      $query->addWhere(30, 'node__field_resume.field_resume_value', '%' . $keywords . '%', 'like');
      /    $query->addWhere(30, 'title', '%' . $keywords . '%', 'like');*/
      /*foreach($keywords as $item) {
	      if(!empty($item) && strlen($item) > 3) {
		      $query->addWhere(3, 'field_body.body_value', '%' . $item . '%', 'like');
		      $query->addWhere(3, 'title', '%' . $item . '%', 'like');

	      }
      }*/
      //$query->where[30]['type'] = 'OR';
     // ksm($query->where);
	//    kint($query->query()->__toString());
    } else {
	    unset($query->where[5]);
    }

    /*
    RECHERCHE GEO
    */
    if (!empty($ou)) {
      $limit_distance = 10;
      $limit_nb_content = 10;
      $ou2 = null;
      /*
      on va tester la présence de contenus dans le cas d'une ville
      */
  
       $session = \Drupal::request()->getSession();
       $database = \Drupal::database();

        if($session->get('search_ville') !== $ou) {
          $session->remove('villes');
          $kidiklik_service = \Drupal::service('kidiklik.service');

          /*
          * recherche du bon nom d'une ville
          */
          $sql = sprintf('select * from villes where commune like "%s" or commune like "%s"', $ou, str_replace(' ','-',$ou));
          $search_ville = $database->query($sql);
          $results = $search_ville->fetch();
          if($results !== false) {
            $ou = $results->commune;
          }

          $seach_event = Views::getView("activites");
          $seach_event->setDisplay("search_by_city");
          $seach_event->setArguments([$kidiklik_service->getTermDepartement(),$ou]);
          $seach_event->execute();
          $count_event = $seach_event->total_rows;
                  
	        if($count_event <= $limit_nb_content) {
            $seach_event = Views::getView("activites");
            $seach_event->setDisplay("search_by_cp");
            $seach_event->setArguments([$kidiklik_service->getTermDepartement(),$ou]);
            $seach_event->execute();
            $count_event = $seach_event->total_rows;
          }

          $villes = [];

          if($count_event <= $limit_nb_content) {
            $info_ville = $kidiklik_service->getInformationsVille($ou ?? $ou2); 

            if($info_ville === false) {
             
              $info_ville = $kidiklik_service->getInformationsVillesByCP($ou); 
              
            }
           
            if($info_ville !== false) {

              $sql = 'select distinct commune,(acos( SIN('.$info_ville->lat.' * PI() / 180) * SIN(lat * PI() / 180) + COS('.$info_ville->lat.' * PI() / 180) * COS(lat * PI() / 180) * COS( ('.$info_ville->lng.'- lng) * PI() / 180 ) ) * 6371) as distance from villes v where code_postal like "'.substr($info_ville->code_postal,0,2).'%" having distance < '.$limit_distance.' order by distance';
              
              $query_calc = $database->query($sql);
              $results = $query_calc->fetchAll();
              foreach($results as $ville) {
                $villes[] = $ville->commune;
              }
              
              $session->set('villes', $villes);
              $session->set('search_ville', $ou);
  
            }

    
          }
        } else {
          $villes = $session->get('villes');
	      }
        /*
        fin recherche si pas trouvé dans où
        */

        $configuration = array(
          'type' => 'INNER',
          'table' => 'node__field_ville_save',
          'field' => 'entity_id',
          'left_table' => 'node_field_data',
          'left_field' => 'nid',
          'operator' => '=',
        );

        $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
        $rel = $query->addRelationship('field_ville', $join, 'node_field_data');
        $query->addTable('node__field_ville_save', $rel, $join, 'field_ville');
        if(count($villes) > 0) {
          $query->addWhere('10', 'field_ville.field_ville_save_value', $villes, 'in');
        } else {
          $query->addWhere('10', 'field_ville.field_ville_save_value', $ou.'%', 'like');
	}
	/*$query->addOrderBy('node__field_ville_save','field_ville_save_value','asc','find_in_set(field_ville_save_value, "'.implode(',',$villes).'")');
	kint($query);exit;*/	
	
	      $configuration = array(
          'type' => 'INNER',
          'table' => 'node__field_code_postal',
          'field' => 'entity_id',
          'left_table' => 'node_field_data',
          'left_field' => 'nid',
          'operator' => '=',
        );

        $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
        $rel = $query->addRelationship('field_cp', $join, 'node_field_data');
        $query->addTable('node__field_code_postal', $rel, $join, 'field_cp');

        $query->addWhere('10', 'field_cp.field_code_postal_value', $ou.'%', 'like');
        $query->where[10]['type'] = 'OR';
        //kint($query);
    } else {
      $configuration = array(
        'type' => 'INNER',
        'table' => 'node__field_departement',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'operator' => '=',
      );

      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('field_dep', $join, 'node_field_data');
      $query->addTable('node__field_departement', $rel, $join, 'field_dep');
      $query->addWhere('3', 'field_dep.field_departement_target_id', get_term_departement(), '=');

    } /*else {
      $query->where[1]['conditions'][1]['value'] = [
        'agenda',
        'activite'
      ];
      }*/


    if (!empty($quand)) {
      switch ($quand) {
        case 'now':
          $date_deb = date('Y-m-d');
          $date_fin = date('Y-m-d');
          break;
        case 'mercredi':
          $date_deb = date('Y-m-d', strtotime('next wednesday'));
          $date_fin = date('Y-m-d', strtotime('next wednesday'));
          break;
        case 'wd':
          $date_deb = date('Y-m-d', strtotime('saturday'));
          $date_fin = date('Y-m-d', strtotime('sunday'));
          break;
        case 'semaine':
	  if(date('Ymd') < date('Ymd', strtotime('monday'))) {
          	$date_deb = date('Y-m-d', strtotime('last monday'));
	  } else {
          	$date_deb = date('Y-m-d', strtotime('monday'));
	  }
          $date_fin = date('Y-m-d', strtotime('sunday'));
          break;
        case 'date':
          $date_deb = \Drupal::request()->get("date_debut");
          $date_fin = \Drupal::request()->get("date_fin");
          break;
      }
      if (empty($date_deb) && empty($date_fin)) {
          $date_deb = date('Y-m-d');
          $date_fin = date('Y-m-d');
//	      unset($query->where[4]["conditions"][2]);
      }
      if (!empty($date_fin)) {
//	      unset($query->where[4]["conditions"][3]);
      }
      $query->where[4]["conditions"] = [];


      $nb_condition = count($query->where[4]["conditions"]);

      $configuration = array(
        'type' => 'LEFT',
        'table' => 'paragraph__field_date_de_fin',
        'field' => 'entity_id',
        'left_table' => 'paragraphs_item_field_data_node__field_date',
        'left_field' => 'id',
        'operator' => '=',
      );
      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin', $join, 'paragraphs_item_field_data_node__field_date');
      $query->addTable('paragraph__field_date_de_fin', $rel, $join, 'paragraph__field_date_de_fin');
      $query->addWhere('4', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value', [], '<>');

      $configuration = array(
        'type' => 'LEFT',
        'table' => 'paragraph__field_date_de_debut',
        'field' => 'entity_id',
        'left_table' => 'paragraphs_item_field_data_node__field_date',
        'left_field' => 'id',
        'operator' => '=',
      );
      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut', $join, 'paragraphs_item_field_data_node__field_date');
      $query->addTable('paragraph__field_date_de_debut', $rel, $join, 'paragraph__field_date_de_debut');
      $query->addWhere('4', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value', [], '<>');


      if (!empty($date_deb) && !empty($date_fin)) {
        $query->where[4]["conditions"][$nb_condition]["field"] = "DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') <= '" . $date_deb . "'
				OR (DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') BETWEEN '" . $date_deb . "' and '" . $date_fin . "')";
        $query->where[4]["conditions"][$nb_condition]["operator"] = 'formula';
        $nb_condition++;
        $query->where[4]["conditions"][$nb_condition]["field"] = "DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d') >= DATE_FORMAT('" . $date_fin . "', '%Y-%m-%d')
				OR (DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d') BETWEEN '" . $date_deb . "' and '" . $date_fin . "')";
        $query->where[4]["conditions"][$nb_condition]["operator"] = 'formula';

      } else if (!empty($date_deb) && empty($date_fin)) {

        $query->where[4]["conditions"][$nb_condition]["operator"] = "formula";

        $query->where[4]["conditions"][$nb_condition]["field"] = "DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') >= '" . $date_deb . "'
          OR ('" . $date_deb . "' between DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and
	  DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d'))";
	unset($query->where[4]['conditions'][1]);

      } else if (!empty($date_fin) && empty($date_deb)) {

        $query->where[4]["conditions"][$nb_condition]["field"] = "DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d') <= DATE_FORMAT('" . $date_fin . "', '%Y-%m-%d')
				OR ('" . $date_fin . "' between DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')
				and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d'))";
        $query->where[4]["conditions"][$nb_condition]["operator"] = "formula";
	unset($query->where[4]['conditions'][1]);
      } else if (empty($date_deb) && empty($date_fin)) {
        //$query->where[4]["conditions"][$nb_condition]["field"] = "((DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')>CURDATE()) or (CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
        
        $query->where[4]["conditions"][$nb_condition]["field"] = $rule_search;
        
        $query->where[4]["conditions"][$nb_condition]["operator"] = "formula";
      }
    } else {
      $query->where[4]["conditions"] = [];
      $nb_condition = count($query->where[4]["conditions"]);

      $configuration = array(
        'type' => 'LEFT',
        'table' => 'paragraph__field_date_de_debut',
        'field' => 'entity_id',
        'left_table' => 'paragraphs_item_field_data_node__field_date',
        'left_field' => 'id',
        'operator' => '=',
      );
      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut', $join, 'paragraphs_item_field_data_node__field_date');
      $query->addTable('paragraph__field_date_de_debut', $rel, $join, 'paragraph__field_date_de_debut');
      $query->addWhere('4', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value', [], '<>');

      $configuration = array(
        'type' => 'LEFT',
        'table' => 'paragraph__field_date_de_fin',
        'field' => 'entity_id',
        'left_table' => 'paragraphs_item_field_data_node__field_date',
        'left_field' => 'id',
        'operator' => '=',
      );
      $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
      $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin', $join, 'paragraphs_item_field_data_node__field_date');
      $query->addTable('paragraph__field_date_de_fin', $rel, $join, 'paragraph__field_date_de_fin');

      //$query->where[4]["conditions"][$nb_condition]["field"] = "((DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')>CURDATE()) or (CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
      $query->where[4]["conditions"][$nb_condition]["field"] = $rule_search;

      $query->where[4]["conditions"][$nb_condition]["operator"] = "formula";

    }

    if (Drupal::Request()->get('field_ville') !== 'geo' && !empty(Drupal::Request()->get('field_ville'))) {

      /* $configuration = array(
         'type' => 'LEFT',
         'table' => 'node__field_ville_save',
         'field' => 'entity_id',
         'left_table' => 'node_field_data',
         'left_field' => 'nid',
         'operator' => '=',
       );
       $join = \Drupal\views\Views::pluginManager('join')
         ->createInstance('standard', $configuration);
       $rel = $query->addRelationship('node__field_ville_save', $join, 'node_field_data');
       $query->addTable('node__field_ville_save', $rel, $join, 'node__field_ville_save');
       $query->addWhere('', 'node__field_ville_save.field_ville_save_value', \Drupal::Request()->get('field_ville'), '=');*/

    }

    foreach($query->where as $key => $where) {
      if(!count($where['conditions'])) {
        unset($query->where[$key]);
      }
    }
  }
  /** fin query recherche */
  if($view->current_display === 'search_agendas_activite') {
  }

}

function kidiklik_front_views_pre_render(\Drupal\views\ViewExecutable $view)
{
  if ($view->current_display == "articles_departement_accueil") {
    $term_dep_national = get_term_departement(0);
    $results = $view->result;
  }
  if ($view->current_display == "recherche_activites") {
    //kint($view->result);
  }

}





