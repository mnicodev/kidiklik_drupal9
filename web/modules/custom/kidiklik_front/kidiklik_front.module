<?php

/**
 * @file
 * Contains kidiklik_front.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\geolocation\ProximityTrait;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\views\Views;

/**
 * Implements hook_help().
 */
function kidiklik_front_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the kidiklik_front module.
    case 'help.page.kidiklik_front':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module pour la gestion du front') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function kidiklik_front_theme()
{
  return [
    'facebook_block' => [
      'variables' => [
        'content' => NULL,
        'dept' => NULL
      ],
    ],
    'type_sorties_block' => [
      'variables' => [
        'content' => NULL,
        'origin' => NULL
      ],
      'render element' => 'children',
    ],
    'sortie_moment_bouton' => [
      'variables' => [
        'ref_act' => NULL,
        'ref_adh' => NULL,
        'dept' => NULL
      ],
    ],
    'kidiklik_front' => [
      'render element' => 'children',
    ],
    'kidiklik_page' => [
      'variables' => [
        "output" => NULL,
      ]
    ],
    'carte_block' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
    'recherche_geo_block' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
    'recherche_activites' => [
      'variables' => [
        'results' => NULL,
      ]
    ],
    'reseaux_sociaux' => [
      'variables' => [
        'content' => NULL,
      ]
    ],
    'reserver_bouton' => [
      'variables' => [
        'content' => NULL,
        'type_resa' => null,
        'lien' => null,
        'email' => null,
        'tel' => null
      ]
    ],
    'sitemap_xml' => [
      'variables' => [
        'content' => NULL,
      ]
    ]
  ];
}


function kidiklik_front_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

  if ($form_id == "user_login_form") {
    $form['name']['#attributes']['class'][] = 'form-control';
    $form['pass']['#attributes']['class'][] = 'form-control';

    $form['connexion'] = [
      '#type' => 'submit',
      '#value' => 'Se connecter',
      '#attributes' => [
        'class' => [
          'btn-connexion'
        ]
      ]
    ];
    $form['msg_label_forget_passwd'] = [
      "#type" => "html_tag",
      '#title' => 'Mot de passe oublié ? ',
      '#value' => 'Mot de passe oublié ? ',
      "#tag" => "a",
      '#attributes' => [
        'href' => '/X255zTZB9ytq/password',
        'class' => [
          'msg-passwd-forget col'
        ]
      ]
    ];
    /*$form['msg_label_creer_compte'] = [
      "#type" => "html_tag",
      '#title' => 'Pas encore de compte ? ',
      '#value' => 'Pas encore de compte ? ',
      "#tag" => "div",
      '#attributes' => [
        'class' => [
          'msg-creer-compte'
        ]
      ]
    ];*/

    $form['btn_creer_compte'] = [
      '#type' => 'html_tag',

      '#value' => 'Créer un compte',
      "#tag" => "a",
      '#attributes' => [
        'href' => '/X255zTZB9ytq/register',
        'data-dialog-type' => 'modal',
        'data-dialog-options' => '{"width":700,"dialogClass":"user-register"}',
        'class' => [
          'btn-creer-compte use-ajax login-popup-form col'
        ]
      ]
    ];

    unset($form['actions']);
  }

  if ($form_id === 'user_register_form' && \Drupal::currentUser()->Id() === 0) {
    unset($form['field_administrateur_dep']);
    unset($form['field_departement']);
    unset($form['field_favoris']);
    unset($form['user_picture']);
  }

  if (!empty($form['#webform_id']) && $form['#webform_id'] === 'jeu_concours') {
    if (!empty(\drupal::request()->get('node'))) {
      $nid = \drupal::request()->get('node')->Id();
      $form['elements']['which_content']['#value'] = $nid;
      $form['#submit'][] = 'kidiklik_front_submit_jeu_concours';
      $form['#validate'][] = 'kidiklik_front_validate_jeu_concours';
    }
  }

  if ($form_id == "contact_message_pour_joindre_kidiklik_form") {

    $form["#validate"][] = "kidiklik_front_validate_contact_form";

  }

  if ($form_id == "node_message_contact_form") {
    $term_dep = get_term_departement();
    $form["#validate"][] = "kidiklik_front_validate_contact_form";
    $form["#attached"]["library"][] = "kidiklik_front/kidiklik_front.actions";
    $form["field_departement"]["widget"][0]["target_id"]["#default_value"] = taxonomy_term_load($term_dep);
  }
}


function kidiklik_front_form_submit($form, FormStateInterface &$form_state)
{
  //kint($form);exit;
}

function getCategories(array &$form, FormStateInterface $form_state)
{
  $response = new AjaxResponse();

  $form["ville"] = [
    "widget" => [
      "#type" => "textfield",
      "#title" => "Ville",
      "#value" => 'test',
      "#prefix" => "<div id='edit-field-ville'>",
      "#suffix" => "</div>",
      '#validated' => TRUE
    ],
    "#weight" => $poids_ville,
    '#validated' => TRUE
  ];
  $renderer = \Drupal::service("renderer");
  $renderedField = $renderer->render($form);
  $response->addCommand(new ReplaceCommand('#sous-categories', $renderedField));
}


function kidiklik_front_validate_contact_form($form, FormStateInterface $form_state)
{
  /* $term_dep = current(\Drupal::entityTypeManager()
     ->getStorage("taxonomy_term")
     ->loadByProperties(['name' => get_departement()]));
   if(!empty($term_dep)) {
     $email = 'nico@3wou.net';//$term_dep->get('field_e_mail')->value;
     if(!empty($email)) {
       $langcode = \Drupal::currentUser()->getPreferredLangcode();
       $mailManager = \Drupal::service('plugin.manager.mail');
       $params['body'] = current($form_state->getValue('field_votre_question'))['value'];
       $params['subject'] = sprintf('Message de %s %s',current($form_state->getValue('field_nom'))['value'],current($form_state->getValue('field_prenom'))['value']);
       $result = $mailManager->mail('kidiklik_front', 'envoi_message', $email, $langcode, $params, NULL, $send);
       if ($result['result'] !== true) {
         drupal_set_message(t('Il y a eu un problème lors de l\'envoi de votre message et il n\'a pas été envoyé.'), 'error');
       }
       else {
         drupal_set_message(t('Votre message a été envoyé-.'));
       }

     }
   }*/
}

function kidiklik_front_submit_jeu_concours($form, FormStateInterface $form_state)
{


}

function kidiklik_front_validate_jeu_concours($form, FormStateInterface $form_state)
{


}


function kidiklik_front_field_widget_paragraphs_form_alter(&$element, FormStateInterface &$form_state, $context) {
  
}


/*
 * Modification de la requête sql d'une vue
 */
function kidiklik_front_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\QueryPluginBase $query)
{
  $term_dep = \Drupal::service('kidiklik.service')->getTermDepartement();
  $rule_search = \Drupal::service('kidiklik.service')->getSqlRuleSearch($view->current_display);

  if ($view->current_display === 'article_national_3' || $view->current_display === 'article_national_1' || $view->current_display === 'article_national_2') {
    $query->where[1]["conditions"][] = current($query->where[0]['conditions']);
    unset($query->where[0]['conditions'][0]);
    $configuration = array(
      'type' => 'left',
      'table' => 'node__field_partage_departements',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep_part', $join, 'node_field_data');
    $query->addTable('node__field_partage_departements', $rel, $join, 'field_dep_part');
    $query->addWhere('', 'field_dep_part.field_partage_departements_target_id', $term_dep, 'in');


    $query->where[0]["type"] = "and";

  }

  if ($view->current_display == "diaporama_rubriques") {
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][2]["value"] = get_date();
    $query->where[1]["conditions"][3]["operator"] = ">=";
    $query->where[1]["conditions"][3]["value"] = get_date();
  }

  if ($view->current_display == "diaporama" ||
    $view->current_display == "block_article_accueil" ||
    $view->current_display == "bloc_liste_mise_en_avant") {
    /* la date de début du bloc de mise en avant doit être inférieur ou égal à la date du jour */
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][2]["value"] = get_date();
    /* la date de fin du bloc de mise en avant doit être supérieur ou égal à la date du jour */
    $query->where[1]["conditions"][3]["operator"] = ">=";
    $query->where[1]["conditions"][3]["value"] = get_date();

    $query->where[1]["conditions"][] = current($query->where[0]['conditions']);
    unset($query->where[0]['conditions'][0]);

    $configuration = array(
      'type' => 'left',
      'table' => 'node__field_partage_departements',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep_part', $join, 'node_field_data');
    $query->addTable('node__field_partage_departements', $rel, $join, 'field_dep_part');
    $query->addWhere('0', 'field_dep_part.field_partage_departements_target_id', [$term_dep], '=');

    $query->where[0]["type"] = "OR";

  }

  if ($view->current_display === 'bloc_jeux_concours') {
    /* la date de début du bloc de mise en avant doit être inférieur ou égal à la date du jour */
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][2]["value"] = date('Y-m-d');
    /* la date de fin du bloc de mise en avant doit être supérieur ou égal à la date du jour */
    $query->where[1]["conditions"][3]["operator"] = ">=";
    $query->where[1]["conditions"][3]["value"] = date('Y-m-d');

    $configuration = array(
      'type' => 'left',
      'table' => 'node__field_partage_departements',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep_part', $join, 'node_field_data');
    $query->addTable('node__field_partage_departements', $rel, $join, 'field_dep_part');
    $query->addWhere('0', 'field_dep_part.field_partage_departements_target_id', $term_dep, 'in');


    $term_dep = get_term_departement();

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_departement',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );


    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep', $join, 'node_field_data');
    $query->addTable('node__field_departement', $rel, $join, 'field_dep');
    $query->addWhere('0', 'field_dep.field_departement_target_id', $term_dep, '=');

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_tous_les_sites',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );


    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_tous_les_sites', $join, 'node_field_data');
    $query->addTable('node__field_tous_les_sites', $rel, $join, 'field_tous_les_sites');
    $query->addWhere('0', 'field_tous_les_sites.field_tous_les_sites_value', 1, '=');

    $query->where[0]["type"] = "OR";
    //if(isset($_GET['dev']))ksm($query);

  }

  if ($view->current_display == "articles_departement_accueil") {
    $deps = [];
    $deps[get_term_departement()] = (string)$term_dep;
    $deps[get_term_departement(0)] = (string)get_term_departement(0);

    $query->where[1]["conditions"][2]["value"] = date("Y-m-d");
    $query->where[1]["conditions"][2]["operator"] = "<=";
    $query->where[1]["conditions"][3]["value"] = date("Y-m-d");
    $query->where[1]["conditions"][3]["operator"] = ">=";

    $query->where[0]["conditions"][1]["value"][":node__field_departement_field_departement_target_id[]"] = $deps;

  }
  if ($view->current_display == "article_national_1" ||
    $view->current_display == "article_national_2" ||
    $view->current_display == "article_national_3" ||
    $view->current_display == "articles_dep_accueil_1" ||
    $view->current_display == "articles_dep_accueil_2" ||
    $view->current_display == "bloc_mise_en_avant_nat" ||
    $view->current_display == "bloc_mise_en_avant_dep" ||
    $view->current_display == "articles_dep_accueil_3") {

    $query->where[1]["conditions"][2]["value"] = get_date();
    $query->where[1]["conditions"][2]["operator"] = "<=";

    $query->where[1]["conditions"][3]["value"] = get_date();
    $query->where[1]["conditions"][3]["operator"] = ">=";
  }

  if ($view->current_display == "bloc_mise_en_avant_nat") {
    if ($view->current_display == "bloc_mise_en_avant_nat") {
      $configuration = array(
        'type' => 'LEFT',
        'table' => 'node__field_partage_departements',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'operator' => '=',
      );

      $join = \Drupal\views\Views::pluginManager('join')
        ->createInstance('standard', $configuration);
      $rel = $query->addRelationship('node__field_partage_departements', $join, 'node_field_data');
      $query->addTable('node__field_partage_departements', $rel, $join, 'node__field_partage_departements');
      $query->addWhere('', 'node__field_partage_departements.field_partage_departements_target_id', (int)$term_dep, '=');
      unset($query->where[0]['conditions'][1]);
      //ksm($query->where);
    }
  }

  if ($view->current_display == "rubriques_activites_footer") {
    $query->where[1]["conditions"][2]["value"] = $term_dep;
    $query->where[1]["conditions"][2]["operator"] = "=";
    // kint($query->query()->__toString());exit;
  }


  /**
   * PAGE RUBRIQUES
   */
  if ($view->current_display == "rubriques_activites") {
    $title = $view->getTitle();
    $departement = \Drupal::entityTypeManager()->getStorage("taxonomy_term")->load($term_dep);

    $title = sprintf('%s %s %s', $title,
      strtolower($departement->get('field_prefix')->value),
      $departement->get('field_nom')->value);
    $view->setTitle($title);

    $term_id = (int)\Drupal::request()->attributes->get('taxonomy_term')->id();
    $liste_child = \Drupal::entityTypeManager()->getStorage("taxonomy_term")->loadByProperties([
      'vid' => 'rubriques_activite',
      'parent' => $term_id,
      'field_departement' => $term_dep,
    ]);
    $tb_child = [];
    foreach ($liste_child as $key => $child) {
      $tb_child[] = $key;
    }
    $tb_child[] = $term_id;
    $query->where[0]["conditions"][0]["field"] = 'taxonomy_index.tid in (' . implode(',', $tb_child) . ')';
    $query->where[0]["conditions"][0]["value"] = [];

    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_debut',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_debut', $rel, $join, 'paragraph__field_date_de_debut');
    $query->addWhere('', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value', [], '<>');

    //$query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = "((DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')>CURDATE()) or (CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";

    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = $rule_search;


    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["operator"] = "formula";
    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_fin',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_fin', $rel, $join, 'paragraph__field_date_de_fin');
  }

  // agenda adhérent
  if ($view->current_display == "page_agenda_adherent" || $view->current_display == "page_contenu_adherent") {
    $ref_act = \Drupal::request()->get("ref_act");
    if ($view->current_display == "page_agenda_adherent" && empty($ref_act)) {
      unset($query->where[0]);
    }
    $title = $view->getTitle();
    $departement = \Drupal::entityTypeManager()->getStorage("taxonomy_term")->load($term_dep);

    $title = sprintf('%s %s %s', $title,
      strtolower($departement->get('field_prefix')->value),
      $departement->get('field_nom')->value);
    $view->setTitle($title);

    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_debut',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_debut', $rel, $join, 'paragraph__field_date_de_debut');
    $query->addWhere('', 'paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value', [], '<>');

    //$query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = "((DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d')>=CURDATE()) or (CURDATE() BETWEEN DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_debut.field_date_de_debut_value, '%Y-%m-%d') and DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d')))";
    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["field"] = $rule_search;
    $query->where[0]["conditions"][count($query->where[0]["conditions"]) - 1]["operator"] = "formula";
    $configuration = array(
      'type' => 'LEFT',
      'table' => 'paragraph__field_date_de_fin',
      'field' => 'entity_id',
      'left_table' => 'paragraphs_item_field_data_node__field_date',
      'left_field' => 'id',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')->createInstance('standard', $configuration);
    $rel = $query->addRelationship('paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin', $join, 'paragraphs_item_field_data_node__field_date');
    $query->addTable('paragraph__field_date_de_fin', $rel, $join, 'paragraph__field_date_de_fin');

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_departement',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );

    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('field_dep', $join, 'node_field_data');
    $query->addTable('node__field_departement', $rel, $join, 'field_dep');
    $query->addWhere('', 'field_dep.field_departement_target_id', $term_dep, '=');
  }

  // activités associées
  if ($view->current_display == "activites_associees") {
    //
    $node = Drupal::request()->get('node');

//kint($node->get('field_adherent')); exit;
    $adh = current($node->get('field_adherent')->getValue())['target_id'];
    if (empty($adh)) {
      $adh = -1;
    }

    $configuration = array(
      'type' => 'INNER',
      'table' => 'node__field_adherent',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('node__field_adherent', $join, 'node__field_adherent');
    $query->addTable('node__field_adherent', $rel, $join, 'node__field_adherent');
    $query->addWhere('', 'node__field_adherent.field_adherent_target_id', $adh, '=');
    $query->addWhere('', 'nid', $node->id(), '<>');

    $query->where[1]['conditions'][2]['field'] = "DATE_FORMAT(paragraphs_item_field_data_node__field_date__paragraph__field_date_de_fin.field_date_de_fin_value, '%Y-%m-%d') >= DATE_FORMAT('" . date('Y-m-d') . "', '%Y-%m-%d')";

  }



}

function kidiklik_front_views_pre_render(\Drupal\views\ViewExecutable $view)
{
  if ($view->current_display == "articles_departement_accueil") {
    $term_dep_national = get_term_departement(0);
    $results = $view->result;
  }
  if ($view->current_display == "recherche_activites") {
    //$view->setTitle('Trouver votre sortie pour enfants');
   // kint($view->result);
  }

}


